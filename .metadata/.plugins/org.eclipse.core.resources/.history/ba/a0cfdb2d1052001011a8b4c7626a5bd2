package com.tienda.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.tienda.entity.DetalleCarrito;
import com.tienda.entity.DetallePedido;
import com.tienda.entity.Producto;
import com.tienda.entity.Usuario;
import com.tienda.service.DetallePedidoService;
import com.tienda.service.ProductoService;

import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping("/cliente")
public class ClienteController {
	
	@Autowired
	private ProductoService productoService;
	
	@Autowired
	private DetallePedidoService detallePedidoService;
	
	// Listar todas las vistas 
	@GetMapping("/inicio")
	public String dashboard(@RequestParam(value = "seccion", defaultValue = "productos") String seccion,
	                        @RequestParam(value = "filtroProducto", required = false) String filtroProducto,
	                        @RequestParam(value = "pageProducto", defaultValue = "1") int paginaProducto,
	                        @RequestParam(value = "filtroDetallePedido", required = false) String filtroDetallePedido,
	                        @RequestParam(value = "pageDetallePedido", defaultValue = "1") int paginaDetallePedido,
	                        @RequestParam(value = "size", defaultValue = "8") int tamanio,
	                        Model model, HttpSession session) {

	    // Obtener el usuario desde la sesión
	    Usuario usuario = (Usuario) session.getAttribute("usuario");

	    // Si no hay usuario en sesión, redirige al login
	    if (usuario == null) {
	        model.addAttribute("error", "Por favor, inicia sesión.");
	        return "redirect:/";
	    }

	    int idUser = usuario.getIdUser();
	    model.addAttribute("seccionActiva", seccion);

	    // Productos
	    if (seccion.equals("productos")) {
	        Page<Producto> productosPage = (filtroProducto == null || filtroProducto.isBlank())
	                ? productoService.buscarActivoPorFiltro("", paginaProducto - 1, tamanio, true)
	                : productoService.buscarActivoPorFiltro(filtroProducto, paginaProducto - 1, tamanio, true);

	        model.addAttribute("productos", productosPage.getContent());
	        model.addAttribute("filtroProducto", filtroProducto);
	        model.addAttribute("paginaActualProducto", paginaProducto);
	        model.addAttribute("totalPaginasProducto", productosPage.getTotalPages());
	        model.addAttribute("totalProductos", productosPage.getTotalElements());
	    }

	    // Detalle de pedidos (solo del usuario)
	    if (seccion.equals("detallePedidos")) {
	    	Page<DetallePedido> detallePedidosPage = (filtroDetallePedido == null || filtroDetallePedido.isBlank())
	    	        ? detallePedidoService.buscarPorFiltroYUsuario("", paginaDetallePedido - 1, tamanio, idUser)
	    	        : detallePedidoService.buscarPorFiltroYUsuario(filtroDetallePedido, paginaDetallePedido - 1, tamanio, idUser);


	        model.addAttribute("detallePedidos", detallePedidosPage.getContent());
	        model.addAttribute("filtroDetallePedido", filtroDetallePedido);
	        model.addAttribute("paginaActualDetallePedido", paginaDetallePedido);
	        model.addAttribute("totalPaginasDetallePedido", detallePedidosPage.getTotalPages());
	        model.addAttribute("totalDetallePedido", detallePedidosPage.getTotalElements());
	    }

	    return "cliente/inicio";
	}
	
	//Ver producto antes de comprar
	@GetMapping("/detalleProducto/{id}")
	public String detalleProducto(@PathVariable("id") int id, Model model) {
	    Producto producto = productoService.buscarPorId(id);
	    model.addAttribute("producto", producto);
	    model.addAttribute("cantidad", 1);
	    return "cliente/detalleProducto";
	}
	
	// Agregar al carrito
	@PostMapping("/agregarCarrito")
	public String agregarAlCarrito(@RequestParam("idProd") int idProd,
	                               @RequestParam("cantidad") int cantidad,
	                               HttpSession session) {
	    
	    Producto producto = productoService.buscarPorId(idProd);
	    
	    // Obtener carrito desde sesión de forma segura
	    Object carritoObj = session.getAttribute("carrito");
	    List<DetalleCarrito> carrito;

	    if (carritoObj instanceof List<?>) {
	        carrito = ((List<?>) carritoObj).stream()
	            .filter(o -> o instanceof DetalleCarrito)
	            .map(o -> (DetalleCarrito) o)
	            .collect(Collectors.toList());
	    } else {
	        carrito = new ArrayList<>();
	    }

	    // Buscar si ya existe ese producto en el carrito
	    Optional<DetalleCarrito> itemExistente = carrito.stream()
	        .filter(i -> i.getProducto().getIdProd() == idProd)
	        .findFirst();

	    if (itemExistente.isPresent()) {
	        DetalleCarrito existente = itemExistente.get();
	        existente.setCantidad(existente.getCantidad() + cantidad);
	        // Asegura que el precio esté actualizado
	        existente.setPrecioUnit(producto.getPrecioUnit());
	    } else {
	    	DetalleCarrito nuevo = new DetalleCarrito();
	    	nuevo.setProducto(producto);
	    	nuevo.setCantidad(cantidad);
	    	nuevo.setPrecioUnit(producto.getPrecioUnit());
	    	carrito.add(nuevo);
	    }

	    // Guardar carrito actualizado en sesión
	    session.setAttribute("carrito", carrito);

	    return "redirect:/cliente/inicio?seccion=productos";
	}
	
	//ver carrito
	@GetMapping("/verCarrito")
	public String verCarrito(HttpSession session, Model model) {
	    Object carritoObj = session.getAttribute("carrito");
	    List<DetalleCarrito> carrito;

	    if (carritoObj instanceof List<?>) {
	        carrito = ((List<?>) carritoObj).stream()
	            .filter(e -> e instanceof DetalleCarrito)
	            .map(e -> (DetalleCarrito) e)
	            .collect(Collectors.toList());
	    } else {
	        carrito = new ArrayList<>();
	    }

	    model.addAttribute("carrito", carrito);
	    return "cliente/verCarrito";
	}

	// Eliminar producto específico del carrito
	@PostMapping("/eliminarDelCarrito")
	public String eliminarDelCarrito(@RequestParam("idProd") int idProd, HttpSession session) {
	    Object carritoObj = session.getAttribute("carrito");
	    if (carritoObj instanceof List<?>) {
	        List<DetalleCarrito> carrito = ((List<?>) carritoObj).stream()
	            .filter(e -> e instanceof DetalleCarrito)
	            .map(e -> (DetalleCarrito) e)
	            .collect(Collectors.toList());

	        carrito.removeIf(item -> item.getProducto().getIdProd() == idProd);
	        session.setAttribute("carrito", carrito);
	    }
	    return "redirect:/cliente/verCarrito";
	}

	// Vaciar todo el carrito
	@PostMapping("/vaciarCarrito")
	public String vaciarCarrito(HttpSession session) {
	    session.removeAttribute("carrito"); // Alternativa a setAttribute con lista vacía
	    return "redirect:/cliente/verCarrito";
	}







}

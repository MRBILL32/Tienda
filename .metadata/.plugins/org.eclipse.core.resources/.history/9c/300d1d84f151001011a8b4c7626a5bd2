package com.tienda.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.tienda.entity.DetallePedido;
import com.tienda.entity.Producto;
import com.tienda.entity.Usuario;
import com.tienda.service.CategoriaService;
import com.tienda.service.DetallePedidoService;
import com.tienda.service.ProductoService;
import com.tienda.service.UsuarioService;

import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping("/empleado")
public class EmpleadoController {
   
	@Autowired
	private UsuarioService usuarioService;
	
	@Autowired
	private ProductoService productoService;
	
	@Autowired
	private CategoriaService categoriaService;
	
	@Autowired
	private DetallePedidoService detallePedidoService;
	
		// Listar todas las vistas 
		@GetMapping("/inicio")
		public String dashboard(@RequestParam(value = "seccion", defaultValue = "usuarios") String seccion,
		                        // usuarios
		                        @RequestParam(value = "filtro", required = false) String filtro,
		                        @RequestParam(value = "page", defaultValue = "1") int pagina,
		                        // productos
		                        @RequestParam(value = "filtroProducto", required = false) String filtroProducto,
		                        @RequestParam(value = "pageProducto", defaultValue = "1") int paginaProducto,
		                        // detalle pedido
		                        @RequestParam(value = "filtroDetallePedido", required = false) String filtroDetallePedido,
		                        @RequestParam(value = "pageDetallePedido", defaultValue = "1") int paginaDetallePedido,
		                        @RequestParam(value = "size", defaultValue = "8") int tamanio,
		                        Model model, HttpSession session) {

		    Usuario logueado = (Usuario) session.getAttribute("usuarioLogueado");
		    if (logueado != null) {
		        model.addAttribute("idActual", logueado.getIdUser());
		    }

		    model.addAttribute("seccionActiva", seccion);

		    // Normalizar filtros a min√∫sculas
		    if (filtro != null) filtro = filtro.toLowerCase();
		    if (filtroProducto != null) filtroProducto = filtroProducto.toLowerCase();
		    if (filtroDetallePedido != null) filtroDetallePedido = filtroDetallePedido.toLowerCase();

		    if (seccion.equals("usuarios")) {
		        Page<Usuario> usuariosPage = (filtro == null || filtro.isBlank())
		                ? usuarioService.listarPaginado(pagina - 1, tamanio)
		                : usuarioService.buscarPorNombreApellidoORRolPaginado(filtro, pagina - 1, tamanio);

		        model.addAttribute("usuarios", usuariosPage.getContent());
		        model.addAttribute("filtro", filtro);
		        model.addAttribute("paginaActual", pagina);
		        model.addAttribute("totalPaginas", usuariosPage.getTotalPages());
		        model.addAttribute("totalUsuarios", usuariosPage.getTotalElements());
		    }

		    if (seccion.equals("productos")) {
		        Page<Producto> productosPage = (filtroProducto == null || filtroProducto.isBlank())
		                ? productoService.listarPaginado(paginaProducto - 1, tamanio)
		                : productoService.buscarTodosPorFiltro(filtroProducto, paginaProducto - 1, tamanio);

		        model.addAttribute("productos", productosPage.getContent());
		        model.addAttribute("filtroProducto", filtroProducto);
		        model.addAttribute("paginaActualProducto", paginaProducto);
		        model.addAttribute("totalPaginasProducto", productosPage.getTotalPages());
		        model.addAttribute("totalProductos", productosPage.getTotalElements());
		    }

		    if (seccion.equals("detallePedidos")) {
		        Page<DetallePedido> detallePedidosPage = (filtroDetallePedido == null || filtroDetallePedido.isBlank())
		                ? detallePedidoService.buscarTodosPorFiltro("", paginaDetallePedido - 1, tamanio)
		                : detallePedidoService.buscarTodosPorFiltro(filtroDetallePedido, paginaDetallePedido - 1, tamanio);

		        model.addAttribute("detallePedidos", detallePedidosPage.getContent());
		        model.addAttribute("filtroDetallePedido", filtroDetallePedido);
		        model.addAttribute("paginaActualDetallePedido", paginaDetallePedido);
		        model.addAttribute("totalPaginasDetallePedido", detallePedidosPage.getTotalPages());
		        model.addAttribute("totalDetallePedido", detallePedidosPage.getTotalElements());
		    }

		    return "/admin/inicio";
		}
	
	    // Conteo Usuarios Por Filtro
	    @GetMapping("/contarUsuarios")
	    @ResponseBody
	    public long contarUsuariosPorFiltro(@RequestParam("filtro") String filtro) {
	    	return usuarioService.contarPorNombreApellidoORRol(filtro);
	    }
	    
	    // Eliminar Usuario
	    @PostMapping("/eliminarUsuario")
	    public String eliminarUsuario(@RequestParam("id") int id, RedirectAttributes redirect) {
	    	Usuario usuario = usuarioService.buscarById(id);
	    	
	    	if(usuario != null && "Aprobado".equalsIgnoreCase(usuario.getEstado())) {
	    	   usuario.setEstado("Rechazado");
	    	   usuarioService.eliminarUsuarioConPedidos(id);
	    	   
	    	   String nombreCompleto = usuario.getNombres() + " " + usuario.getApellidos();
	    	   redirect.addFlashAttribute("eliminar", "La Cuenta de "+nombreCompleto+" fue Eliminada.");
	    	}
	    	return "redirect:/admin/inicio";
	    }
		
		
}

	

